// Mocks generated by Mockito 5.4.4 from annotations
// in phoenix_wings/test/phoenix_push_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:phoenix_wings/src/phoenix_channel.dart' as _i2;
import 'package:phoenix_wings/src/phoenix_message.dart' as _i5;
import 'package:phoenix_wings/src/phoenix_socket.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePhoenixChannel_0 extends _i1.SmartFake
    implements _i2.PhoenixChannel {
  _FakePhoenixChannel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PhoenixChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhoenixChannel extends _i1.Mock implements _i2.PhoenixChannel {
  MockPhoenixChannel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set socket(_i3.PhoenixSocket? _socket) => super.noSuchMethod(
        Invocation.setter(
          #socket,
          _socket,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set rejoinTimer(_i4.Timer? _rejoinTimer) => super.noSuchMethod(
        Invocation.setter(
          #rejoinTimer,
          _rejoinTimer,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get canPush => (super.noSuchMethod(
        Invocation.getter(#canPush),
        returnValue: false,
      ) as bool);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  bool get isErrored => (super.noSuchMethod(
        Invocation.getter(#isErrored),
        returnValue: false,
      ) as bool);

  @override
  bool get isJoined => (super.noSuchMethod(
        Invocation.getter(#isJoined),
        returnValue: false,
      ) as bool);

  @override
  bool get isJoining => (super.noSuchMethod(
        Invocation.getter(#isJoining),
        returnValue: false,
      ) as bool);

  @override
  bool get isLeaving => (super.noSuchMethod(
        Invocation.getter(#isLeaving),
        returnValue: false,
      ) as bool);

  @override
  bool isMember(
    String? topicParam,
    String? event,
    Map<dynamic, dynamic>? payload,
    String? joinRefParam,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isMember,
          [
            topicParam,
            event,
            payload,
            joinRefParam,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  int on(
    String? event,
    _i2.PhoenixMessageCallback? callback,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #on,
          [
            event,
            callback,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  void off(
    dynamic event, [
    dynamic ref,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #off,
          [
            event,
            ref,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic onClose(_i2.PhoenixMessageCallback? callback) =>
      super.noSuchMethod(Invocation.method(
        #onClose,
        [callback],
      ));
}

/// A class which mocks [PhoenixSocket].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhoenixSocket extends _i1.Mock implements _i3.PhoenixSocket {
  MockPhoenixSocket() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<int> get reconnectAfterMs => (super.noSuchMethod(
        Invocation.getter(#reconnectAfterMs),
        returnValue: <int>[],
      ) as List<int>);

  @override
  set reconnectAfterMs(List<int>? _reconnectAfterMs) => super.noSuchMethod(
        Invocation.setter(
          #reconnectAfterMs,
          _reconnectAfterMs,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i2.PhoenixChannel> get channels => (super.noSuchMethod(
        Invocation.getter(#channels),
        returnValue: <_i2.PhoenixChannel>[],
      ) as List<_i2.PhoenixChannel>);

  @override
  set channels(List<_i2.PhoenixChannel>? _channels) => super.noSuchMethod(
        Invocation.setter(
          #channels,
          _channels,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get timeout => (super.noSuchMethod(
        Invocation.getter(#timeout),
        returnValue: 0,
      ) as int);

  @override
  set timeout(int? _timeout) => super.noSuchMethod(
        Invocation.setter(
          #timeout,
          _timeout,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: 0,
      ) as int);

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);

  @override
  int get connectionState => (super.noSuchMethod(
        Invocation.getter(#connectionState),
        returnValue: 0,
      ) as int);

  @override
  int get sendBufferLength => (super.noSuchMethod(
        Invocation.getter(#sendBufferLength),
        returnValue: 0,
      ) as int);

  @override
  _i2.PhoenixChannel channel(
    String? topic, [
    Map<dynamic, dynamic>? params = const {},
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #channel,
          [
            topic,
            params,
          ],
        ),
        returnValue: _FakePhoenixChannel_0(
          this,
          Invocation.method(
            #channel,
            [
              topic,
              params,
            ],
          ),
        ),
      ) as _i2.PhoenixChannel);

  @override
  dynamic remove(_i2.PhoenixChannel? channelToRemove) =>
      super.noSuchMethod(Invocation.method(
        #remove,
        [channelToRemove],
      ));

  @override
  dynamic onOpen(dynamic Function()? callback) =>
      super.noSuchMethod(Invocation.method(
        #onOpen,
        [callback],
      ));

  @override
  dynamic onClose(dynamic Function(dynamic)? callback) =>
      super.noSuchMethod(Invocation.method(
        #onClose,
        [callback],
      ));

  @override
  dynamic onError(dynamic Function(dynamic)? callback) =>
      super.noSuchMethod(Invocation.method(
        #onError,
        [callback],
      ));

  @override
  dynamic onMessage(dynamic Function(_i5.PhoenixMessage)? callback) =>
      super.noSuchMethod(Invocation.method(
        #onMessage,
        [callback],
      ));

  @override
  dynamic disconnect({int? code = 1000}) =>
      super.noSuchMethod(Invocation.method(
        #disconnect,
        [],
        {#code: code},
      ));

  @override
  void stopHeartbeat() => super.noSuchMethod(
        Invocation.method(
          #stopHeartbeat,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void sendHeartbeat(_i4.Timer? timer) => super.noSuchMethod(
        Invocation.method(
          #sendHeartbeat,
          [timer],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void push(_i5.PhoenixMessage? msg) => super.noSuchMethod(
        Invocation.method(
          #push,
          [msg],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String makeRef() => (super.noSuchMethod(
        Invocation.method(
          #makeRef,
          [],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #makeRef,
            [],
          ),
        ),
      ) as String);
}
